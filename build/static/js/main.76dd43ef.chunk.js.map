{"version":3,"sources":["logo.svg","PyrmontBrewery_Kegerator.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","href","target","PyrmontBrewery_Kegerator","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76dd43ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3c43810a.svg\";","module.exports = __webpack_public_path__ + \"static/media/PyrmontBrewery_Kegerator.4a3e9f46.png\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport PyrmontBrewery_Kegerator from './PyrmontBrewery_Kegerator.png';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    let classLink = 'App-link';\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            The <b>Pyrmont Brewery</b> has been churning out the good stuff here in the city of Sydney, Australia since 2007\n            <br/>\n            <br/>\n            We brew beer exclusively for local businesses to keep the cost of distribution minimal and stay well within our supply capacity<br/>\n            Because we sell alcoholic beverages, under NSW Liquor and Gaming rules if you are <i>under 18 years</i> then sorry this site is not for you\n            <br/>\n            <br/>\n            Some of our Pyrmont heritage brews to choose from:<br/><br/>\n            <b>Whinging Pom</b> - British Bitter - classic Maris Otter based Real Ale, with Fuggles and East Kent Goldings (can be served via beer gun without refrigeration)<br/>\n            <b>Hellhole Helle</b> - German dortmunder style (Tasmania) Pilsner and Enignma hops)<br/>\n            <b>Paradise Saison</b> - Easy drinking French style Saison, lightly Centennial hopped<br/>\n            <b>Purgatory Pale Ale</b> - Australian Westcoast style 2 row pale ale with Challenger<br/>\n            <b>Halfway House Stout</b> - fresh stout (best served 3:1 nitro:co2)<br/>\n            <b>Quarry Quaffer</b> - Australian sessionable Pride of Ringwood lager<br/>\n            <b>Surgeon Harris</b> - San Diego strong ale, its a little arrogant<br/>\n            <b>Union Square IIPA</b> - Feisty Adelaide style strong hopped double IPA<br/>\n            <b>Maybanke</b> - A light Hobart inspired Pilsner (2.9%)<br/>\n            <br/>\n            In Pyrmont needing some local brews? <a href={\"mailto:kegs@pyrmontbrewery.com\"} target={\"_blank\"} className={classLink}>\n            kegs@pyrmontbrewery.com</a><br/>\n            We'll supply 50L DIN kegs (A-type coupler) or 19L Cornelius (ball lock) or long neck bottling for small batches<br/>\n            We encourage responsible consumption of our brews<br/>\n            <a href={\"mailto:kegs@pyrmontbrewery.com\"} target={\"_blank\"}><img src={PyrmontBrewery_Kegerator} width=\"80%\"></img></a>\n            <br/>\n            Being a huge fan of open source and creative commons, the head brewer is sharing a small selection of our beers for you to have a go:\n          </p>\n          <p>\n            <a href={\"Beer Arrogant Bastard.xml\"} target={\"_blank\"} className={classLink}>Arrogant Bastard.xml</a> - American Strong Ale<br/>\n            <a href={\"Beer Brexit.bsmx\"} target={\"_blank\"} className={classLink}>Brexit.bsmx</a> - British Bitter<br/>\n            <a href={\"Beer Demo Gremlins.bsmx\"} target={\"_blank\"} className={classLink}>Demo Gremlins.bsmx</a> - Australian Pale Ale<br/>\n            <a href={\"Beer Kaibrau Kolsch.bsmx\"} target={\"_blank\"} className={classLink}>Kaibrau Kolsch.bsmx</a> - German KÃ¶lsch<br/>\n            <a href={\"Beer Oompa Loomper.bsmx\"} target={\"_blank\"} className={classLink}>Oompa Loomper.bsmx</a> - Chocolate Porter<br/>\n            <a href={\"Beer Rudolf Red.bsmx\"} target={\"_blank\"} className={classLink}>Rudolf Red.bsmx</a> - Red Ale<br/>\n            <a href={\"Beer Seong Cerveza.bsmx\"} target={\"_blank\"} className={classLink}>Seong Cerveza.bsmx</a> - Cerveza<br/>\n            <a href={\"Beer Suz Saison.bsmx\"} target={\"_blank\"} className={classLink}>Suz Saison.bsmx</a> - French Saison<br/>\n          </p>\n          <p>\n            and good on yers for following us @pyrmontbrewery...<br/><a href={\"https://twitter.com/pyrmontbrewery\"} target={\"_blank\"} className={classLink}>\n            Twitter</a><br/><a href={\"https://facebook.com/secretsquirrelbrew\"} target={\"_blank\"} className={classLink}>\n            Facebook</a><br/><a href={\"https://www.instagram.com/secretsquirrelbrew\"} target={\"_blank\"} className={classLink}>\n            Instagram</a>\n          </p>\n\n          <p>Cheers!</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Topic({ match }) {\n  return <h3>Requested Param: {match.params.id}</h3>;\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:id`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <ul>\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/about\">About</Link>\n      </li>\n      <li>\n        <Link to=\"/topics\">Topics</Link>\n      </li>\n    </ul>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}